/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_15 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_math_math;
  wire [1-1:0] M_math_z;
  wire [1-1:0] M_math_v;
  wire [1-1:0] M_math_n;
  reg [16-1:0] M_math_x;
  reg [16-1:0] M_math_y;
  reg [3-1:0] M_math_alufn;
  alu_math_18 math (
    .x(M_math_x),
    .y(M_math_y),
    .alufn(M_math_alufn),
    .math(M_math_math),
    .z(M_math_z),
    .v(M_math_v),
    .n(M_math_n)
  );
  
  wire [16-1:0] M_shift_shif;
  reg [16-1:0] M_shift_x;
  reg [4-1:0] M_shift_y;
  reg [2-1:0] M_shift_alufn;
  alu_shift_19 shift (
    .x(M_shift_x),
    .y(M_shift_y),
    .alufn(M_shift_alufn),
    .shif(M_shift_shif)
  );
  
  wire [16-1:0] M_compare_cmp;
  reg [2-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  alu_compare_20 compare (
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .cmp(M_compare_cmp)
  );
  
  wire [16-1:0] M_boole_bool;
  reg [16-1:0] M_boole_x;
  reg [16-1:0] M_boole_y;
  reg [4-1:0] M_boole_alufn;
  alu_boole_21 boole (
    .x(M_boole_x),
    .y(M_boole_y),
    .alufn(M_boole_alufn),
    .bool(M_boole_bool)
  );
  
  reg [15:0] math_out;
  reg [15:0] shif;
  reg [15:0] comp;
  reg [15:0] bool;
  
  reg z_mid;
  reg v_mid;
  reg n_mid;
  
  always @* begin
    alu = 16'h0000;
    M_math_alufn = alufn[0+2-:3];
    M_math_x = a;
    M_math_y = b;
    math_out = M_math_math;
    z_mid = M_math_z;
    v_mid = M_math_v;
    n_mid = M_math_n;
    M_compare_alufn = alufn[1+1-:2];
    M_compare_z = z_mid;
    M_compare_v = v_mid;
    M_compare_n = n_mid;
    comp = M_compare_cmp;
    z = z_mid;
    v = v_mid;
    n = n_mid;
    M_boole_x = a;
    M_boole_y = b;
    M_boole_alufn = alufn[0+3-:4];
    bool = M_boole_bool;
    M_shift_x = a;
    M_shift_y = b[0+3-:4];
    M_shift_alufn = alufn[0+1-:2];
    shif = M_shift_shif;
    
    case (alufn[5+0-:1])
      1'h0: begin
        
        case (alufn[4+0-:1])
          1'h0: begin
            alu = math_out;
          end
          1'h1: begin
            alu = bool;
          end
        endcase
      end
      1'h1: begin
        
        case (alufn[4+0-:1])
          1'h0: begin
            alu = shif;
          end
          1'h1: begin
            alu = comp;
          end
        endcase
      end
    endcase
  end
endmodule
