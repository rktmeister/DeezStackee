/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_boole_21 (
    input [15:0] x,
    input [15:0] y,
    input [3:0] alufn,
    output reg [15:0] bool
  );
  
  
  
  wire [(5'h10+0)-1:0] M_bool_value_boole;
  reg [(5'h10+0)-1:0] M_bool_value_x;
  reg [(5'h10+0)-1:0] M_bool_value_y;
  reg [(5'h10+0)*4-1:0] M_bool_value_alufn;
  
  genvar GEN_bool_value0;
  generate
  for (GEN_bool_value0=0;GEN_bool_value0<5'h10;GEN_bool_value0=GEN_bool_value0+1) begin: bool_value_gen_0
    boole_25 bool_value (
      .x(M_bool_value_x[GEN_bool_value0*(1)+(1)-1-:(1)]),
      .y(M_bool_value_y[GEN_bool_value0*(1)+(1)-1-:(1)]),
      .alufn(M_bool_value_alufn[GEN_bool_value0*(3'h4)+(3'h4)-1-:(3'h4)]),
      .boole(M_bool_value_boole[GEN_bool_value0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  
  always @* begin
    M_bool_value_x = x;
    M_bool_value_y = y;
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      M_bool_value_alufn[(i)*4+3-:4] = alufn;
    end
    bool = M_bool_value_boole;
  end
endmodule
