/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shift_19 (
    input [15:0] x,
    input [3:0] y,
    input [1:0] alufn,
    output reg [15:0] shif
  );
  
  
  
  reg [15:0] xNew;
  
  reg [15:0] shift_mid;
  
  wire [16-1:0] M_shifterModule_shiftOutput;
  reg [16-1:0] M_shifterModule_x;
  reg [4-1:0] M_shifterModule_b;
  reg [1-1:0] M_shifterModule_alufn;
  shifterModule_24 shifterModule (
    .x(M_shifterModule_x),
    .b(M_shifterModule_b),
    .alufn(M_shifterModule_alufn),
    .shiftOutput(M_shifterModule_shiftOutput)
  );
  
  integer i;
  
  always @* begin
    shif = 16'h0000;
    
    case (alufn[0+0-:1])
      1'h0: begin
        xNew = x;
      end
      1'h1: begin
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          xNew[(i)*1+0-:1] = x[(4'hf - i)*1+0-:1];
        end
      end
      default: begin
        xNew = x;
      end
    endcase
    M_shifterModule_x = xNew;
    M_shifterModule_b = y;
    M_shifterModule_alufn = alufn[1+0-:1];
    shift_mid = M_shifterModule_shiftOutput;
    
    case (alufn[0+0-:1])
      1'h0: begin
        shif = shift_mid;
      end
      1'h1: begin
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          shif[(i)*1+0-:1] = shift_mid[(4'hf - i)*1+0-:1];
        end
      end
    endcase
  end
endmodule
