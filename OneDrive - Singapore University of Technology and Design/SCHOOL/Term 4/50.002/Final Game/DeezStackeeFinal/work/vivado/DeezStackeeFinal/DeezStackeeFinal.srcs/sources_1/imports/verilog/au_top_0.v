/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [7:0] led_cathode,
    output reg [15:0] led_anode,
    input stop_button,
    input reset_button,
    output reg [7:0] timer_seg,
    output reg [3:0] timer_sel,
    output reg [7:0] score_seg,
    output reg [3:0] score_sel,
    output reg [7:0] highScore_seg,
    output reg [3:0] highScore_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [144-1:0] M_matrixConnect_led_matrix;
  wire [16-1:0] M_matrixConnect_time_out;
  wire [16-1:0] M_matrixConnect_score_out;
  reg [1-1:0] M_matrixConnect_stop_button;
  reg [1-1:0] M_matrixConnect_reset_button;
  matrixConnect_2 matrixConnect (
    .clk(clk),
    .rst(rst),
    .stop_button(M_matrixConnect_stop_button),
    .reset_button(M_matrixConnect_reset_button),
    .led_matrix(M_matrixConnect_led_matrix),
    .time_out(M_matrixConnect_time_out),
    .score_out(M_matrixConnect_score_out)
  );
  reg [143:0] M_led_matrix_d, M_led_matrix_q = 144'hff00000000000000000000000000000000ff;
  wire [8-1:0] M_displayLED_a;
  wire [16-1:0] M_displayLED_c;
  reg [128-1:0] M_displayLED_pattern;
  displayLED_3 displayLED (
    .clk(clk),
    .rst(rst),
    .pattern(M_displayLED_pattern),
    .a(M_displayLED_a),
    .c(M_displayLED_c)
  );
  wire [(2'h2+0)-1:0] M_buttoncond_out;
  reg [(2'h2+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<2'h2;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_4 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(2'h2+0)-1:0] M_buttondetector_out;
  reg [(2'h2+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<2'h2;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_5 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  reg [15:0] M_time_d, M_time_q = 1'h0;
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [15:0] M_highScore_d, M_highScore_q = 1'h0;
  wire [7-1:0] M_seg_timer_seg;
  wire [4-1:0] M_seg_timer_sel;
  reg [16-1:0] M_seg_timer_values;
  multi_seven_seg_6 seg_timer (
    .clk(clk),
    .rst(rst),
    .values(M_seg_timer_values),
    .seg(M_seg_timer_seg),
    .sel(M_seg_timer_sel)
  );
  wire [7-1:0] M_seg_score_seg;
  wire [4-1:0] M_seg_score_sel;
  reg [16-1:0] M_seg_score_values;
  multi_seven_seg_6 seg_score (
    .clk(clk),
    .rst(rst),
    .values(M_seg_score_values),
    .seg(M_seg_score_seg),
    .sel(M_seg_score_sel)
  );
  wire [7-1:0] M_seg_highScore_seg;
  wire [4-1:0] M_seg_highScore_sel;
  reg [16-1:0] M_seg_highScore_values;
  multi_seven_seg_6 seg_highScore (
    .clk(clk),
    .rst(rst),
    .values(M_seg_highScore_values),
    .seg(M_seg_highScore_seg),
    .sel(M_seg_highScore_sel)
  );
  
  always @* begin
    M_score_d = M_score_q;
    M_highScore_d = M_highScore_q;
    M_time_d = M_time_q;
    M_led_matrix_d = M_led_matrix_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 16'h0000;
    M_buttoncond_in[0+0-:1] = stop_button;
    M_buttoncond_in[1+0-:1] = reset_button;
    M_buttondetector_in = M_buttoncond_out;
    M_matrixConnect_stop_button = M_buttondetector_out[0+0-:1];
    M_matrixConnect_reset_button = M_buttondetector_out[1+0-:1];
    M_time_d = M_matrixConnect_time_out;
    M_score_d = M_matrixConnect_score_out;
    if (M_highScore_q[8+3-:4] < M_score_q[8+3-:4]) begin
      M_highScore_d = M_score_q;
    end else begin
      if ((M_highScore_q[8+3-:4] == M_score_q[8+3-:4])) begin
        if (M_highScore_q[4+3-:4] < M_score_q[4+3-:4]) begin
          M_highScore_d = M_score_q;
        end else begin
          if (M_highScore_q[4+3-:4] == M_score_q[4+3-:4]) begin
            if (M_highScore_q[0+3-:4] < M_score_q[0+3-:4]) begin
              M_highScore_d = M_score_q;
            end
          end
        end
      end
    end
    M_led_matrix_d = M_matrixConnect_led_matrix;
    M_displayLED_pattern = M_led_matrix_q[0+127-:128];
    led_cathode = M_displayLED_a;
    led_anode = M_displayLED_c;
    M_seg_timer_values = {M_time_q[0+3-:4], M_time_q[4+3-:4], M_time_q[8+3-:4], M_time_q[12+3-:4]};
    timer_seg = ~M_seg_timer_seg;
    timer_sel = ~M_seg_timer_sel;
    M_seg_score_values = {M_score_q[0+3-:4], M_score_q[4+3-:4], M_score_q[8+3-:4], M_score_q[12+3-:4]};
    score_seg = ~M_seg_score_seg;
    score_sel = ~M_seg_score_sel;
    M_seg_highScore_values = {M_highScore_q[0+3-:4], M_highScore_q[4+3-:4], M_highScore_q[8+3-:4], M_highScore_q[12+3-:4]};
    highScore_seg = ~M_seg_highScore_seg;
    highScore_sel = ~M_seg_highScore_sel;
  end
  
  always @(posedge clk) begin
    M_led_matrix_q <= M_led_matrix_d;
    M_time_q <= M_time_d;
    M_score_q <= M_score_d;
    M_highScore_q <= M_highScore_d;
  end
  
endmodule
