/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_adder_26 (
    input alufn0,
    input [15:0] x,
    input [15:0] y,
    output reg [15:0] s,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder16_s;
  wire [1-1:0] M_adder16_cout;
  reg [16-1:0] M_adder16_x;
  reg [16-1:0] M_adder16_y;
  reg [1-1:0] M_adder16_cin;
  sixteen_bit_adder_27 adder16 (
    .x(M_adder16_x),
    .y(M_adder16_y),
    .cin(M_adder16_cin),
    .s(M_adder16_s),
    .cout(M_adder16_cout)
  );
  
  wire [1-1:0] M_z_value_z;
  reg [16-1:0] M_z_value_s;
  get_z_28 z_value (
    .s(M_z_value_s),
    .z(M_z_value_z)
  );
  
  wire [1-1:0] M_v_value_v;
  reg [1-1:0] M_v_value_s16;
  reg [1-1:0] M_v_value_x16;
  reg [1-1:0] M_v_value_y16;
  get_v_29 v_value (
    .s16(M_v_value_s16),
    .x16(M_v_value_x16),
    .y16(M_v_value_y16),
    .v(M_v_value_v)
  );
  
  reg [15:0] yNew;
  
  reg [15:0] s_mid;
  
  localparam NUMBER_OF_BITS = 5'h10;
  
  integer i;
  
  always @* begin
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      yNew[(i)*1+0-:1] = y[(i)*1+0-:1] ^ alufn0;
    end
    M_adder16_y = yNew;
    M_adder16_x = x;
    M_adder16_cin = alufn0;
    s_mid = M_adder16_s;
    s = s_mid;
    n = s_mid[15+0-:1];
    M_z_value_s = s_mid;
    z = M_z_value_z;
    M_v_value_s16 = s_mid[15+0-:1];
    M_v_value_x16 = x[15+0-:1];
    M_v_value_y16 = yNew[15+0-:1];
    v = M_v_value_v;
  end
endmodule
