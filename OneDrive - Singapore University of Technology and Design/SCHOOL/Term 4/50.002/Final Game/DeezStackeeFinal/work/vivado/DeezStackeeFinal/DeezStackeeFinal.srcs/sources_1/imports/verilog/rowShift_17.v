/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module rowShift_17 (
    input clk,
    input shift_or_check,
    input [15:0] pre_row,
    input [15:0] current_row,
    output reg [15:0] nextRefresh
  );
  
  
  
  reg M_predirection_d, M_predirection_q = 1'h1;
  wire [1-1:0] M_directionChange_next_direction;
  reg [1-1:0] M_directionChange_direction;
  reg [16-1:0] M_directionChange_current_row;
  directionChange_22 directionChange (
    .clk(clk),
    .direction(M_directionChange_direction),
    .current_row(M_directionChange_current_row),
    .next_direction(M_directionChange_next_direction)
  );
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_15 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_predirection_d = M_predirection_q;
    
    M_directionChange_current_row = 16'h0000;
    M_directionChange_direction = 1'h1;
    nextRefresh = 16'h0000;
    M_alu_a = current_row;
    M_alu_b = 16'h0000;
    M_alu_alufn = 6'h00;
    if (shift_or_check == 1'h1) begin
      M_directionChange_direction = M_predirection_q;
      M_directionChange_current_row = current_row;
      if (M_directionChange_next_direction == 1'h1) begin
        M_alu_a = current_row;
        M_alu_b = 16'h0001;
        M_alu_alufn = 8'h20;
        M_predirection_d = 1'h1;
        nextRefresh = M_alu_alu;
      end else begin
        if (M_directionChange_next_direction == 1'h0) begin
          M_alu_a = current_row;
          M_alu_b = 16'h0001;
          M_alu_alufn = 8'h21;
          M_predirection_d = 1'h0;
          nextRefresh = M_alu_alu;
        end
      end
    end else begin
      if (shift_or_check == 1'h0) begin
        M_alu_a = current_row;
        M_alu_b = pre_row;
        M_alu_alufn = 8'h18;
        nextRefresh = M_alu_alu;
      end
    end
  end
  
  always @(posedge clk) begin
    M_predirection_q <= M_predirection_d;
  end
  
endmodule
